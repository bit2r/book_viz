[["index.html", "데이터 시각화 1 . 데이터 시각화", " 데이터 시각화 한국 R 사용자회 2022-05-02 1 . 데이터 시각화 "],["hello-world.html", "2 . 헬로우 월드 2.1 나폴레옹 러시아 침공 2.2 시각화 2.3 참고서적", " 2 . 헬로우 월드 2.1 나폴레옹 러시아 침공 나폴레옹 황제가 프랑스를 통치할 때 1812년 최대 전성기를 구가했다. 최대 전성기를 구가하던 1812년 나폴레옹은 러시아 침공을 감행했다. 나폴레옹의 러시아침공은 데이터 시각화의 역작을 남기는 계기가 되기도 했다. 미나르는 프랑스의 러시아 침공을 군더더기 없이 시작부터 폐퇴하여 돌아온 과정까지 간략하게 표현했다. 미나르 데이터 시각화의 지명을 자세히 보면 프랑스의 러시아 침공에 대해 대략적으로 인식하고 있는 것과 다소 차이가 난다. 통상 프랑스 수도 파리에서 나폴레옹 대군이 출발하여 러시아 모스코바에서 한동안 머물다가 다시 수도 파리로 돌아와서 황제에서 끌어내려져 엘바섬으로 위배를 떠난 것으로 알려져 있지만 실제 미나르가 데이터에 기반하여 제작한 시각화 그래프에는 진실이 담겨있다. 1 2.2 시각화 library(HistData) library(tidyverse) library(gridExtra) library(ggrepel) data(Minard.troops) data(Minard.cities) data(Minard.temp) source(&quot;../../../swc/sungnam-report/R/theme_election.R&quot;, encoding = &quot;UTF-8&quot;) levels(Minard.cities$city) &lt;- c(&quot;Bobr&quot;, &quot;Chjat&quot;, &quot;Dorogobouge&quot;, &quot;Gloubokoe&quot;, &quot;Kowno&quot;, &quot;Malo-Jarosewii&quot;, &quot;Minsk&quot;, &quot;Mohilow&quot;, &quot;Moiodexno&quot;, &quot;Mojaisk&quot;, &quot;모스코바&quot;, &quot;Orscha&quot;, &quot;Polotzk&quot;, &quot;Smolensk&quot;, &quot;Smorgoni&quot;, &quot;Studienska&quot;, &quot;Tarantino&quot;, &quot;Wilna&quot;, &quot;Witebsk&quot;, &quot;Wixma&quot;) # 진군 퇴각 군대와 도시명 breaks &lt;- c(1, 2, 3) * 10^5 plot_minard &lt;- Minard.troops %&gt;% ggplot(aes(x = long, y = lat)) + geom_path(aes(size = survivors, colour = direction, group = group), lineend = &quot;round&quot;, linejoin = &quot;round&quot;) + geom_text(aes(label = city), size = 4, data = Minard.cities) + scale_size(&quot;생존병사수&quot;, range = c(1, 10), breaks = breaks, labels = scales::comma(breaks)) + scale_color_manual(&quot;진격방향&quot;, values = c(&quot;grey50&quot;, &quot;red&quot;), labels=c(&quot;진격&quot;, &quot;후퇴&quot;)) + coord_cartesian(xlim = c(24, 38)) + labs(x = NULL, y = &quot;경도&quot;, title = &quot;나폴레옹 러시아 침공&quot;, subtitle = &quot;1812년 6월 24일 ~ 1813년 1월 5일&quot;) + theme_election() + theme(legend.position=c(.8, .2), legend.box=&quot;horizontal&quot;) # 러시아 침공 월별 기온 plot_temp &lt;- Minard.temp %&gt;% mutate(date = case_when(str_detect(date, &quot;Oct&quot;) ~ str_replace(date, &quot;Oct&quot;, &quot;10월&quot;), str_detect(date, &quot;Nov&quot;) ~ str_replace(date, &quot;Nov&quot;, &quot;11월&quot;), str_detect(date, &quot;Dec&quot;) ~ str_replace(date, &quot;Dec&quot;, &quot;12월&quot;), TRUE ~ &quot;미상&quot;)) %&gt;% mutate(date = glue::glue(&quot;{date}일&quot;)) %&gt;% mutate(date = ifelse(date == &quot;미상일&quot;, &quot;미상&quot;, date)) %&gt;% ggplot(aes(long, temp)) + geom_path(color=&quot;grey&quot;, size=1.5) + geom_point(size=2) + geom_text_repel(aes(label=glue::glue(&quot;{date}&quot;)) ) + xlab(&quot;위도&quot;) + ylab(&quot;기온&quot;) + coord_cartesian(xlim = c(24, 38)) + theme_bw() # 러시아 침공 그래프와 기온 그래프 결합 minard_g &lt;- grid.arrange(plot_minard, plot_temp, nrow=2, heights=c(3,1)) # 미나드 그래프 PNG 파일 저장 ggsave( glue::glue(&quot;assets/images/나폴레옹_러시아.png&quot;) , minard_g, device = ragg::agg_png, width = 297, height = 210, units = &quot;mm&quot;, res = 600) 2.3 참고서적 영어로 참고할 오픈 데이터 시각화 교재 (Healy 2018) (Dougherty and Ilyankou 2021) (Wilke 2019) References "],["시각화-개요.html", "3 . 시각화 개요 3.1 글꼴 3.2 R 코딩 글꼴 3.3 ggplot 시각화 글꼴 3.4 showtext 패키지 2", " 3 . 시각화 개요 3.1 글꼴 R을 단순히 통계 언어로 생각하지 말고 적용범위를 확대해서 활용하면 데이터 과학 산출물을 다양한 전자문서로 제작하여 커뮤니케이션 할 수 있다. PDF, HTML, 워드 등 문서 뿐만 아니라, 파워포인트 같은 발표자료를 슬라이드로 제작하여 배포할 수 있다. 그래프 문법(Grammar of Graphics)에 따라 ggplot 시각화를 산출물에도 다양한 글꼴(font)을 반영하여 좀더 관심을 끌 수 있는 그래프 제작도 가능하다. 데이터 과학자나 개발자 관점에서도 통합개발환경(IDE)이 필요한데 개발과 저작에 집중할 수 있는 글꼴을 지정하여 활용할 경우 생산성도 높일 수 있고 좀더 쾌적한 환경에서 개발을 진행할 수 있다. R 스크립트 작성을 위한 글꼴과 그래프에 한글 글꼴(font)을 적용한다. ggplot을 비롯한 시각화를 위해 extrafont와 showtext 패키지를 활용하여 적절한 한글 글꼴을 사용할 뿐만 아니라 코딩 개발할 때 R 스크립트(.R) 및 R마크다운(.Rmd)에서도 적절한 한글글꼴 사용을 위해서 코딩관련 글꼴도 설치한다. 기본적인 작업흐름은 운영체제에 먼저 외부에서 가져온 폰트를 설치한다. 그리고 나서 extrafont 팩키지 font_import() 함수를 사용해서 폰트를 R에서 불러 사용할 수 있도록 설치한다. 그리고 나서 loadfonts() 함수를 사용해서 글꼴을 ggplot등에서 불러 사용한다. 구글 글꼴을 사용하고자 할 경우 showtext 패키지를 사용해서 로컬 컴퓨터에 설치하여 적용한다. R 폰트/글꼴 설치 3.2 R 코딩 글꼴 문서를 위해 작성하는데 사용되는 글꼴과 R 코딩을 위해 사용되는 글꼴은 차이가 난다. 왜냐하면 R 코딩에 사용되는 글꼴은 가독성이 좋아야하고 디버깅에 용이해야 된다. 영어는 consolas 글꼴을 많이 사용하는데 무료가 아니다. 그래서 consolas에서 영감을 받은 SIL 오픈 폰트 라이선스를 따르는 Inconsolata가 R 코딩에 많이 사용되고 있다. 하지만, R코드를 작성할 때 주석을 한글로 달거나 R마크다운 작업을 할 경우 유사한 기능을 하는 한글 글꼴이 필요하다. 네이버 나눔고딕 코딩글꼴 D2 Coding 글꼴 “네이버 나눔고딕 코딩글꼴”과 “D2 Coding 글꼴”을 설치하고 나서 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창에서 Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다. D2 코딩폰트 설치 3.3 ggplot 시각화 글꼴 extrafont 팩키지에서 font_import() 함수로 운영체제(윈도우/리눅스)에 설치된 글꼴을 R로 가져온다. 그리고 나서 loadfonts() 함수를 사용해서 설치된 글꼴을 사용하는 작업흐름을 따르게 된다. library(extrafont) font_import(pattern = &quot;D2&quot;) Importing fonts may take a few minutes, depending on the number of fonts and the speed of the system. Continue? [y/n] y Scanning ttf files in C:\\Windows\\Fonts ... Extracting .afm files from .ttf files... C:\\Windows\\Fonts\\D2Coding-Ver1.3.2-20180524.ttf =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/D2Coding-Ver1.3.2-20180524 C:\\Windows\\Fonts\\D2CodingBold-Ver1.3.2-20180524.ttf =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/D2CodingBold-Ver1.3.2-20180524 C:\\Windows\\Fonts\\MOD20.TTF =&gt; C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics/MOD20 Found FontName for 3 fonts. Scanning afm files in C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/metrics Writing font table in C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/fontmap/fonttable.csv Writing Fontmap to C:/Users/tidyverse_user/Documents/R/win-library/3.5/extrafontdb/fontmap/Fontmap... font_import(pattern = &quot;Nanum&quot;) 3.3.1 ggplot 한글 글꼴 사례 extrafont 패키지 loadfonts() 함수를 사용해서 ggplot에서 적용시킬 수 있는 글꼴을 불러냈다. R 내장 데이터셋 iris를 사용하여 나눔글꼴 “Nanum Pen Script”을 기본 글꼴로 적용시켰다. library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.8 ## ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ## ✓ readr 2.1.2 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(extrafont) ## Registering fonts with R loadfonts() # 로컬 PC 에서 설치된 글꼴을 불러냄!!! iris %&gt;% ggplot(aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point()+ labs(title=&quot;붓꽃 데이터 한글 글꼴 적용&quot;, color=&quot;붓꽃 종류&quot;) + theme_minimal(base_family = &quot;Nanum Pen Script&quot;) + theme(legend.position = &quot;top&quot;) 3.4 showtext 패키지 2 extrafont 패키지를 통해 한자를 포함한 한글을 처리할 수 있었으나, extrafont는 트루타입폰트(.ttf)를 PDF 그래픽 장치에 초점을 맞춰 개발이 되었다. 따라서, 데이터과학 최종산출물이 PDF 형태 책이 아닌 경우 여러가지 면에서 다양한 한글 글꼴을 표현하는데 있어 한계가 있다. 새로 개발된 showtext 팩키지는 Ghostscript같은 외부 소프트웨어를 활용하지 않고도 다양한 (그래픽) 글꼴을 지원한다. showtext로 R 그래프를 생성할 때, 다양한 글꼴(TrueType, OpenType, Type 1, web fonts 등)을 지원한다. 과거 PDF와 같은 책형태로 정보를 공유하고 전달하는 방식이 주류를 이뤘다면 인터넷 등장 이후 웹으로 정보 생성과 소비가 주류로 떠오르게 되면서 글꼴에도 변화가 생겼다. 가까운 미래에는 웹을 우선시하는 글꼴이 대세를 이룰 것으로 보인다. showtext 글꼴 사용자가 그래프에 텍스트를 넣기 위해 R 함수에서 text()를 호출할 때 showtext가 활성화 되어 있으면 showtext 팩키지 text() 함수를 호출해서 그래픽 혹은 이미지 파일에 텍스트를 표현하고 그렇지 않는 경우는 디폴트 장치함수 text() 함수를 호출하게 되어 있다. 내부적으로 상세 작동 로직은 글꼴 위치를 파악해서 글리프(glyph) 정보를 추출하고 비트맵 형식, 벡터그래픽 형식에 따라서 비트맵일 경우 raster() 장치함수를 호출하고, 벡터그래픽인 경우 path() 장치함수를 호출해서 기능을 수행한다. 3.4.1 R 설치 글꼴 확인 extrafont 팩키지 loadfonts() 함수를 통해 .ttf 파일 정보를 확인한다. 현재 구글 글끌 페이지에서 많은 한글 글꼴을 지원하지 않고 있다. 구글에서 전세계 글꼴을 지원하다보 동아시아 3국 대상으로 지원되는 글꼴은 적은 것으로 보인다. # 0. 환경설정 -------------------------------------------------------------------------- library(tidyverse) library(showtext) # 글꼴, install.packages(&quot;showtext&quot;) library(extrafont) loadfonts() 3.4.2 ggplot 글꼴 적용 한글 글꼴을 바로 적용하기에 앞서 showtext 패키지 포함된 영문글꼴 적용 사례를 먼저 돌려보자. ggplot 그래픽에 적용되는 showtext 활용 기본 작업흐름은 다음과 같다. 글꼴을 적재한다. 그래픽 장치를 연다 showtext를 통해 텍스트를 표시한다고 지정한다. 그래프를 그린다. 장치를 닫는다. library(tidyverse) library(showtext) ## Loading required package: sysfonts ## Loading required package: showtextdb ## ## Attaching package: &#39;showtextdb&#39; ## The following object is masked from &#39;package:extrafont&#39;: ## ## font_install # ggplot 그래픽 ---------------------------- dat &lt;- data.frame(cond = factor(rep(c(&quot;A&quot;,&quot;B&quot;), each=200)), rating = c(rnorm(200),rnorm(200, mean=.8))) font_add_google(&quot;Schoolbell&quot;, &quot;bell&quot;) # 글꼴 적재 showtext.begin() # 그래픽 장치 열기 ## &#39;showtext.begin()&#39; is now renamed to &#39;showtext_begin()&#39; ## The old version still works, but consider using the new function in future code ggplot(dat, aes(x=rating)) + geom_histogram(binwidth=.5)+ annotate(&quot;text&quot;, 1, 2.1, family = &quot;bell&quot;, size = 15, color=&quot;red&quot;, label = &quot;histogram&quot;) showtext.end() # 그래픽 장치 닫기 ## &#39;showtext.end()&#39; is now renamed to &#39;showtext_end()&#39; ## The old version still works, but consider using the new function in future code 3.4.3 로컬 글꼴 적용 로컬 컴퓨터에 저장된 .ttf 파일을 사용자 지정해서 가져온 후 이를 ggplot에 반영하여 한글을 R 그래프에 적용하는 것도 가능하다. showtext는 extrafont 보다 나중에 개발되어 extrafont가 로컬 컴퓨터에 설치된 글꼴을 ggplot에 구현되는데 전력을 다했다면 showtext는 이를 발판으로 나중에 개발되어 구글 폰트와 같은 인터넷 글꼴과 최근 웹출판에 대한 개념도 넣어 개발된 것이 차이점이다. # ３. 한글 그래픽 -------------------------------------------------------------------------- ## 나눔펜 스크립트 font_add(&quot;NanumBarunGothic&quot;, &quot;NanumBarunGothic.ttf&quot;) showtext.auto() ## &#39;showtext.auto()&#39; is now renamed to &#39;showtext_auto()&#39; ## The old version still works, but consider using the new function in future code p &lt;- ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) + theme(axis.title = element_blank(), axis.ticks = element_blank(), axis.text = element_blank()) + annotate(&quot;text&quot;, 1, 1.1, family = &quot;NanumBarunGothic&quot;, size = 15, color=&quot;red&quot;, label = &quot;한글 사랑&quot;) + annotate(&quot;text&quot;, 1, 0.9, label = &#39;korean for &quot;Hello, world!&quot;&#39;, family = &quot;NanumBarunGothic&quot;, size = 12) print(p) showtext: Using Fonts More Easily in R Graphs↩︎ "],["데이터-연장---dplyr.html", "4 . 데이터 연장 - dplyr", " 4 . 데이터 연장 - dplyr "],["ggplot.html", "5 . 시각화 5.1 그래프 문법의 존재이유 5.2 그래프 문법 5.3 ggplot 확장", " 5 . 시각화 5.1 그래프 문법의 존재이유 Leland Wilkinson의 “The Grammar of Graphics”는 1999년 첫 출간된 이후 데이터 그래픽(data graphics)에 많은 영향을 주어 ggplot2, Polaris → Tableau, Vega-Lite 등의 형태로 우리곁에 다가섰다. 기존 데이터를 시각화한 다양한 그래픽 객체를 만드려면 각 그래픽 객체별로 따로 사용법을 익혀야만 되었다. 이것이 갖는 한계는 그래프 종류가 적은 경우 유용하지만 그래프 종류가 많아지면 매번 따로 사용법을 배워야되서 확장가능성이 무척 떨어지게 된다. 그래서, 이를 일반화한 무언가 필요한데 데이터 그래픽 객체를 분해해서 8개 계층으로 분해하여 조립하여 그래프를 제작하게 되면 앞선 문제를 일거에 해소할 수 있다. 그래프 문법(grammar of graphics)을 통해 데이터를 가장 잘 표현할 수 있는 그래프를 생성할 수 있게 되었다. ggplot이 필요한 이유 5.2 그래프 문법 그래프 문법은 총 8가지 층으로 구성되어 있는데 이를 각 층별로 나눠보면 다음과 같다. 5.2.1 데이터(Data) 그래프 문법 ggplot에 데이터는 깔끔한 데이터(tidy data)를 가정한다. 이를 위해서 기존 wide형태 데이터는 key-value long 형태로 바뀌어 준비한다. 깔끔한 데이터 wide, long 데이터 5.2.2 매핑(Mapping) 깔끔한 데이터가 준비되면 다음 단계로 칼럼에 해당되는 각 변수를 aes() 함수를 사용해서 aes(x=x, y=y, color=z, ...)와 같은 방식으로 데이터와 그래프를 매핑한다. 데이터를 그래프에 매핑 5.2.3 통계량(statistics) 범주형 그래프를 시각화할 경우 빈도수를 통계량으로 계산해놔야 하고, 연속형 변수를 히스토그램으로 표현할 때도 마찬가지 방식으로 구간별 빈도수를 계산해놔야 하고, 특히 상자그림(boxplot)을 시각화할 경우 각 분위수는 물론이고 중위수도 및 interquantile도 계산해서 수염의 끝도 계산해놔야 제대로된 상자그림을 시각화할 수 있다. 그래프별 기본설정 통계량 5.2.4 척도(scales) X축, Y축의 척도를 그래프에서 자동으로 인식하는데는 한계가 있어 이를 필요한 경우 적절한 형태로 설정한다. scale_&lt;x, y, color, fill, ...&gt;_&lt;유형&gt;() 구문을 갖는다. 예를 들어 Y축을 담당하는 변수가 로그척도(log)가 적합한 경우 이를 scale_y_log10()와 같이 변수를 특성을 반영한 척도를 설정한다. 변수가 날짜나 시간인 경우 scale_x_date(), scale_x_datetime()을 활용하여 적절한 형태로 설정한다. aes 매핑된 축 척도지정 5.2.5 기하형상(geometries) 예를 들어, 범주형 변수를 aes()로 지정하고 이를 적절한 그래프로 표현하기 위한 결정과정으로 geom_*() 방식으로 원그래프, 막대그래프, 점그래프 등으로 변수를 시각화객체로 지정한다. 기하형상 지정 5.2.6 작은 창(facet) 원본 데이터를 그룹으로 쪼개 작은 창에 동일한 시각화 객체를 표현하는 방법으로 다차원 데이터를 차원별로 나눠 볼 수 있다. 중요한 점은 각 작은 창이 동일한 유형의 그래프라는 점이 중요하다. 그룹으로 쪼갠 작은 창(facet) 5.2.7 좌표계(coordinate) 깔끔한 데이터를 그래프에 매칭하여 시각화한 후에 경우에 따라서 좌표계를 변경할 경우가 있다. coord_fixed(), coord_polar(), coord_flip() 등을 사용해서 특정 영역 확대, 데카르트 좌표계에서 극좌표계, X-Y 축 변경 등의 작업을 수행할 수 있다. 좌표계 변환 library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.8 ## ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ## ✓ readr 2.1.2 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() cartesian_g &lt;- mtcars %&gt;% mutate(cyl = as.factor(cyl)) %&gt;% count(cyl) %&gt;% ggplot(aes(x=&quot;&quot;, y=n, fill=cyl)) + geom_bar(position = &quot;stack&quot;, stat = &quot;identity&quot;) polar_g &lt;- mtcars %&gt;% mutate(cyl = as.factor(cyl)) %&gt;% count(cyl) %&gt;% ggplot(aes(x=&quot;&quot;, y=n, fill=cyl)) + geom_col() + coord_polar(&quot;y&quot;, start = 0) gridExtra::grid.arrange(cartesian_g, polar_g, nrow=1) 5.2.8 분위기 풍(theme) 분위기 풍(theme)은 앞선 깔끔한 데이터를 시각화 객체로 변환시키는 과정과 아무런 연관이 없다. 대신 외양을 보기좋게 하는 역할을 수행한다. 즉, 시각화에 알맞는 색상 팔레트를 적용시키고, 글꼴을 바꾸는 작업이 여기에 해당된다. tufte 분위기 풍(theme) library(ggthemes) default_g &lt;- mtcars %&gt;% ggplot(aes(x=disp, y=mpg)) + geom_point() tufte_g &lt;- mtcars %&gt;% ggplot(aes(x=disp, y=mpg)) + geom_point() + theme_tufte() gridExtra::grid.arrange(default_g, tufte_g, nrow=1) 5.3 ggplot 확장 기본 ggplot 그래프 객체를 갖게 되면 2개 이상의 그래프를 합치거나 배열을 달리하고, 강조를 하고 주석(annotation)을 달고 애니메이션과 인터랙티브 기능을 추가하여 확장시킬 수 있다. "],["사례.html", "6 . 사례", " 6 . 사례 "],["references-1.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
