[["index.html", "데이터 시각화 데이터 시각화", " 데이터 시각화 한국 R 사용자회 2022-05-03 데이터 시각화 후원계좌 디지털 불평등 해소를 위해 제작중인 오픈 통계패키지 개발과 고품질 콘텐츠 제작에 큰 힘이 됩니다. - 하나은행 448-910057-06204 - 사단법인 한국알사용자회 "],["hello-world.html", "1 . 헬로우 월드 1.1 나폴레옹 러시아 침공 1.2 시각화 1.3 참고서적", " 1 . 헬로우 월드 1.1 나폴레옹 러시아 침공 나폴레옹 황제가 프랑스를 통치할 때 1812년 최대 전성기를 구가했다. 최대 전성기를 구가하던 1812년 나폴레옹은 러시아 침공을 감행했다. 나폴레옹의 러시아침공은 데이터 시각화의 역작을 남기는 계기가 되기도 했다. 미나르는 프랑스의 러시아 침공을 군더더기 없이 시작부터 폐퇴하여 돌아온 과정까지 간략하게 표현했다. 미나르 데이터 시각화의 지명을 자세히 보면 프랑스의 러시아 침공에 대해 대략적으로 인식하고 있는 것과 다소 차이가 난다. 통상 프랑스 수도 파리에서 나폴레옹 대군이 출발하여 러시아 모스코바에서 한동안 머물다가 다시 수도 파리로 돌아와서 황제에서 끌어내려져 엘바섬으로 위배를 떠난 것으로 알려져 있지만 실제 미나르가 데이터에 기반하여 제작한 시각화 그래프에는 진실이 담겨있다. 1 1.2 시각화 1.3 참고서적 영어로 참고할 오픈 데이터 시각화 교재 (Healy 2018) (Dougherty and Ilyankou 2021) (Wilke 2019) References "],["시각화-구성요소.html", "시각화 구성요소", " 시각화 구성요소 데이터 시각화를 할 때 다양한 구성요소를 이해하고 이를 체계적으로 조합하여 시각화 객체를 제작해야만 이후 재사용가능한 시각화 산출물을 제작하여 지속적인 발전을 이뤄낼 수 있다. "],["viz-font.html", "2 . 글꼴 2.1 R 코딩 글꼴 2.2 ggplot 시각화 글꼴 2.3 showtext 패키지 2 2.4 로컬 글꼴 적용", " 2 . 글꼴 R을 단순히 통계 언어로 생각하지 말고 적용범위를 확대해서 활용하면 데이터 과학 산출물을 다양한 전자문서로 제작하여 커뮤니케이션 할 수 있다. PDF, HTML, 워드 등 문서 뿐만 아니라, 파워포인트 같은 발표자료를 슬라이드로 제작하여 배포할 수 있다. 그래프 문법(Grammar of Graphics)에 따라 ggplot 시각화를 산출물에도 다양한 글꼴(font)을 반영하여 좀더 관심을 끌 수 있는 그래프 제작도 가능하다. 데이터 과학자나 개발자 관점에서도 통합개발환경(IDE)이 필요한데 개발과 저작에 집중할 수 있는 글꼴을 지정하여 활용할 경우 생산성도 높일 수 있고 좀더 쾌적한 환경에서 개발을 진행할 수 있다. R 스크립트 작성을 위한 글꼴과 그래프에 한글 글꼴(font)을 적용한다. ggplot을 비롯한 시각화를 위해 extrafont와 showtext 패키지를 활용하여 적절한 한글 글꼴을 사용할 뿐만 아니라 코딩 개발할 때 R 스크립트(.R) 및 R마크다운(.Rmd)에서도 적절한 한글글꼴 사용을 위해서 코딩관련 글꼴도 설치한다. 기본적인 작업흐름은 운영체제에 먼저 외부에서 가져온 폰트를 설치한다. 그리고 나서 extrafont 팩키지 font_import() 함수를 사용해서 폰트를 R에서 불러 사용할 수 있도록 설치한다. 그리고 나서 loadfonts() 함수를 사용해서 글꼴을 ggplot등에서 불러 사용한다. 구글 글꼴을 사용하고자 할 경우 showtext 패키지를 사용해서 로컬 컴퓨터에 설치하여 적용한다. R 폰트/글꼴 설치 2.1 R 코딩 글꼴 문서를 위해 작성하는데 사용되는 글꼴과 R 코딩을 위해 사용되는 글꼴은 차이가 난다. 왜냐하면 R 코딩에 사용되는 글꼴은 가독성이 좋아야하고 디버깅에 용이해야 된다. 영어는 consolas 글꼴을 많이 사용하는데 무료가 아니다. 그래서 consolas에서 영감을 받은 SIL 오픈 폰트 라이선스를 따르는 Inconsolata가 R 코딩에 많이 사용되고 있다. 하지만, R코드를 작성할 때 주석을 한글로 달거나 R마크다운 작업을 할 경우 유사한 기능을 하는 한글 글꼴이 필요하다. 네이버 나눔고딕 코딩글꼴 D2 Coding 글꼴 “네이버 나눔고딕 코딩글꼴”과 “D2 Coding 글꼴”을 설치하고 나서 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창에서 Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다. D2 코딩폰트 설치 2.2 ggplot 시각화 글꼴 extrafont 팩키지에서 font_import() 함수로 운영체제(윈도우/리눅스)에 설치된 글꼴을 R로 가져온다. 그리고 나서 loadfonts() 함수를 사용해서 설치된 글꼴을 사용하는 작업흐름을 따르게 된다. 2.2.1 ggplot 한글 글꼴 사례 extrafont 패키지 loadfonts() 함수를 사용해서 ggplot에서 적용시킬 수 있는 글꼴을 불러냈다. R 내장 데이터셋 iris를 사용하여 나눔글꼴 “Nanum Pen Script”을 기본 글꼴로 적용시켰다. 2.3 showtext 패키지 2 extrafont 패키지를 통해 한자를 포함한 한글을 처리할 수 있었으나, extrafont는 트루타입폰트(.ttf)를 PDF 그래픽 장치에 초점을 맞춰 개발이 되었다. 따라서, 데이터과학 최종산출물이 PDF 형태 책이 아닌 경우 여러가지 면에서 다양한 한글 글꼴을 표현하는데 있어 한계가 있다. 새로 개발된 showtext 팩키지는 Ghostscript같은 외부 소프트웨어를 활용하지 않고도 다양한 (그래픽) 글꼴을 지원한다. showtext로 R 그래프를 생성할 때, 다양한 글꼴(TrueType, OpenType, Type 1, web fonts 등)을 지원한다. 과거 PDF와 같은 책형태로 정보를 공유하고 전달하는 방식이 주류를 이뤘다면 인터넷 등장 이후 웹으로 정보 생성과 소비가 주류로 떠오르게 되면서 글꼴에도 변화가 생겼다. 가까운 미래에는 웹을 우선시하는 글꼴이 대세를 이룰 것으로 보인다. showtext 글꼴 사용자가 그래프에 텍스트를 넣기 위해 R 함수에서 text()를 호출할 때 showtext가 활성화 되어 있으면 showtext 팩키지 text() 함수를 호출해서 그래픽 혹은 이미지 파일에 텍스트를 표현하고 그렇지 않는 경우는 디폴트 장치함수 text() 함수를 호출하게 되어 있다. 내부적으로 상세 작동 로직은 글꼴 위치를 파악해서 글리프(glyph) 정보를 추출하고 비트맵 형식, 벡터그래픽 형식에 따라서 비트맵일 경우 raster() 장치함수를 호출하고, 벡터그래픽인 경우 path() 장치함수를 호출해서 기능을 수행한다. 2.3.1 R 설치 글꼴 확인 extrafont 팩키지 loadfonts() 함수를 통해 .ttf 파일 정보를 확인한다. 현재 구글 글끌 페이지에서 많은 한글 글꼴을 지원하지 않고 있다. 구글에서 전세계 글꼴을 지원하다보 동아시아 3국 대상으로 지원되는 글꼴은 적은 것으로 보인다. 2.3.2 ggplot 글꼴 적용 한글 글꼴을 바로 적용하기에 앞서 showtext 패키지 포함된 영문글꼴 적용 사례를 먼저 돌려보자. ggplot 그래픽에 적용되는 showtext 활용 기본 작업흐름은 다음과 같다. 글꼴을 적재한다. 그래픽 장치를 연다 showtext를 통해 텍스트를 표시한다고 지정한다. 그래프를 그린다. 장치를 닫는다. 2.4 로컬 글꼴 적용 로컬 컴퓨터에 저장된 .ttf 파일을 사용자 지정해서 가져온 후 이를 ggplot에 반영하여 한글을 R 그래프에 적용하는 것도 가능하다. showtext는 extrafont 보다 나중에 개발되어 extrafont가 로컬 컴퓨터에 설치된 글꼴을 ggplot에 구현되는데 전력을 다했다면 showtext는 이를 발판으로 나중에 개발되어 구글 폰트와 같은 인터넷 글꼴과 최근 웹출판에 대한 개념도 넣어 개발된 것이 차이점이다. showtext: Using Fonts More Easily in R Graphs↩︎ "],["viz-color.html", "3 . 색상 3.1 시각화 메커니즘 3 3.2 RGB 색상모형 대안 - HCL 3.3 프린터 색상모형: CMYK 5 6 3.4 RColorBrewer 와 viridis", " 3 . 색상 3.1 시각화 메커니즘 3 크게 보면 기계 즉, 컴퓨터가 색을 이해하고 표현하는 RGB 체계와 사람이 색을 인지하고 이해하는 HCL 체계로 나누어 진다. 2진수로 표현된 시각적 데이터는 RGB 16진수로 변환되어 모니터에 표시되고, 물리적 광자(photon)로 사람눈에 위치한 망막에 꽂히게 되고, 사람은 뇌에서 인지한 후에 이를 처리하여 시각적인 정보를 인식하게 된다. 따라서, 사람뇌에 인식할 수 있는 시각적인 정보로 데이터를 구성해야만 다양한 종류의 모니터를 통해 효율적이고 효과적으로 정보가 전달될 수 있다. 시각적 인지 메커니즘 3.1.1 16진수 RGB 표색법 양수 숫자나 크레파스 명칭 대신에, 일반적이고 컴퓨터가 읽어들일 수 있는 색상 표색법이 16진수 팔레트다. Cynthia Brewer 는 펜실베니아 대학에서 교수로 색상이론과 시각화에 관련된 전문분야를 갖고 있으며 특히, ColorBrewer 으로 알려진 색생체계는 웹, 출판, 색맹을 고려하여 널리 쓰이고 있다. ColorBrewer 색상체계를 R에서 시각화를 할 때 사용될 수 있게 만든 것이 RColorBrewer 패키지다. RColorBrewer Dark2 팔레트를 통해 실제로 구현된 색상체계를 살펴보자. ## [1] &quot;#1B9E77&quot; &quot;#D95F02&quot; &quot;#7570B3&quot; &quot;#E7298A&quot; &quot;#66A61E&quot; &quot;#E6AB02&quot; &quot;#A6761D&quot; ## [8] &quot;#666666&quot; # 기호는 관례로 붙이는 것이고, 16진수 문자열을 다음과 같이 파싱한다: #rrggbb에서 rr, gg, bb 각각은 적색, 녹색, 청색 채널에 대한 생상농도를 나타낸다. 각 색상은 2를 밑으로 하는 16개 숫자를 나타내고, “16진수(hexadecimal)” 혹은 줄여서 헥스(hex)로 부른다. 다음에 밑을 10으로 하는 십진수와 16진수 비교표가 다음에 나와 있다. 0 1 2 3 4 5 6 7 8 9 A B C D E F 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 예를 들어, 팔렛트 첫 색상이 #1B9E77으로 명세되어 있다. 따라서, 녹색 채널 색상농도는 9E가 된다. \\[ 9E = 9 * 16^1 + 14 * 16^0 = 9 * 16 + 14 = 158 \\] 무슨 뜻일까? 해당 채널의 가장 낮은 값은 00=0 이 되고, 가장 높은 값은 FF=255 가 된다. 도움이 되는 기억해야될 중요한 사례가 다음에 나타나 있다. 적색, 녹색, 청색에 대한 강렬한 RGB 색상은 다음과 같다. 색상 헥스코드 붉은색 녹색 파란색 blue #0000FF 0 0 255 green #00FF00 0 255 0 red #FF0000 255 0 0 다음에 흑백, 회색을 표현한 것이 나타나 있다. 색상 헥스코드 붉은색 녹색 파란색 white, gray100 #FFFFFF 255 255 255 gray67 #ABABAB 171 171 171 gray33 #545454 84 84 84 black, gray0 #000000 0 0 0 “gray” 회색으로 치환하게 되면, “gray”를 보게되는 어느 곳에서나 동일한 결과를 얻게 됨에 주목한다. 모든 채널을 최대값으로 하면 흰색, 모든 채널을 최소값으로 하면 검정색이 된다. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} R에서 색상을 지정하는 방법 양의 정수: palette()함수로 조작하거나 검색한 현재 색상 팔레트에 인덱스를 사용. 색상 명칭: colors() 함수로 검색된 색상 16진수 문자열: 16진수로 구성된 3개조에 추가해서, 알파 투명도를 나타내는 네번째 채널을 넣어 16진수 4개조로 구성된 생상표로 확장하기도 한다. rgb(), col2rgb(), convertColor() 함수도 유용하니, 자세한 내용은 도움말을 참조한다. 3.2 RGB 색상모형 대안 - HCL RGB 색공간과 색상모형이 유일무이하고 가장 최고는 아니다. 컴퓨터 화면에 색상을 표현하는데는 자연스럽지만, 일부 영역에서 색상을 선택하는 작업에는 이런 모형을 적용하기 어렵다. 예를 들어, 사람이 구별하기는 쉽지만, 인지적으로 색상별로 비교되는 생각으로 구성된 정성적인 팔레트를 만들어 내는 방법은 명확하지 않다. 컴퓨터에 사용되는 색상을 기술하는데 RGB를 사용하지만, 사람이 색상체계를 구축하는 색공간에 RGB체계를 사용할 이유는 없다. 이점은 사람과 컴퓨터가 다른 것이고, 이를 인정해야만 된다. 색상모형은 일반적으로 RGB와 마찬가지로 세가지 차원으로 구성된다. 이는 망막에 세가지 다른 수용체를 인간이 갖는 생리적 사실에 기인한다. RGB와 인간 시각 체계에 대한 자세한 정보는 블로그를 참고한다. 색상모형의 차원이 사람이 인식할 수 있는 식별가능한 정보량에 더 가까이 부합되면 될수록, 더욱 유용하다. 이런 부합성이 사려깊게 작성된 팔레트 생성을 가능하게 하고, 더불어 특정한 특성을 갖는 색공간에 대한 길을 연다. RGB 색체계는 인간의 인식체계와 일치성이 떨어진다. 적색, 녹색, 청색광을 탐지할 수 있는 광수용체를 갖기 때문에, 색을 인지하는 체험이 RGB 방식으로 분해된다는 것을 의미하지 않는다. 적색과 녹색을 섞은 것으로 황색을 인식하는 체험을 했는가? 물론 아니다. 생리학적인 현실은 그렇다. 또다른 RGB 대안 모형이 HSV(Hue-Saturation-Value, 색상-채도-명도)모형이다. 불행하게도, 색을 선택하는데 문제가 많은데, 이유는 색상이 서로 중첩되는 차원을 갖기 때문이다. 사람이 인지하기 좋은 색모형은 무엇일까? CIELUV 와 CIELAB 이 가장 잘 알려진 사례다. CIELUV의 변종인 HCL(Hue-Chroma-Luminance, 색상-채도-휘도) 모형을 좀더 살펴보자. Zeileis와 동료들이 R 사용자를 위한 팩키지로 멋지게 작성했다.4 colorspace R 팩키지에 딸려있고, HCL 색상모형을 탐색하고 이용하는데 도움을 준다. 마지막으로, HCL 색모형이 ggplot2에 RColorBrewer와 마찬가지로 잘 녹여져있다. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} HCL 색상모형의 세가지 차원 색상(Hue) : 색상은 일반적으로 “색상이 뭐지?”라고 생각할 때 생각나는 것이다. 이해가 바로되는 쉬운 것이다! 각도로 주어지고 따라서 0 에서 360 까지 값을 갖는데, 무지개 도넛을 상상하면 된다. 채도(Chroma) : 채도는 색상이 얼마나 순수한지 혹은 생생한지 나타낸다. 특정 색상이 회색과 섞일 수록, 채도는 떨어진다. 가장 낮은 값은 0 으로 회색 그자체에 대응되고, 최대값은 휘도에 따라 변한다. 휘도(Lumiance) : 휘도는 명도(brightness), 명도(Lightness), 광도(intensity), 명도(value)와 관련된다. 낮은 휘도는 어두움을 의미하고, 진짜 검정색은 휘도가 0 이다. 높은 휘도는 밝음을 의미하고, 진짜 흰색은 휘도가 1 이다. 저자는 채도와 휘도를 이해하고 구별하는데 힘든 시간을 보냈다. 위에서 살펴봤듯이, 색체계는 서로 독립된 것이 아니고, 3차원 HCL 공간에 기이한 모형으로 정보를 제공하고 있다. 위캠의 ggplot2 책에 나온 6.6 그림이 HCL 색공간을 이해하는데 도움이 된다. ggplot2 HCL 색공간 위캠 책에 언급된 내용을 다시 적으면 다음과 같다: 각 측면, 창은 휘도에 따라 가장 낮은 값에서 높은 값 순으로 HCL 공간을 슬라이스로 나누어 도식화한 것을 보여주고 있다. 0 과 100 극단 휘도값은 생략되었는데, 이유는 각각 검은 점과 흰점으로 나타나기 때문이다. 슬라이스 내부에, 중심은 채도가 0 으로, 회색에 대응된다. 슬라이스 끝쪽으로 이동하면, 채도가 증가하고, 색상이 더 순색에 가까워지고 농도가 짖어진다. 색상은 각도로 매핑된다. colorspace 팩키지에 가치있는 기여는 아마도 함수를 사용해서 색상공간을 합리적 방식으로 색공간을 이리저리 돌아다닐 수 있게 만든 것이다. 이와는 대조적으로 RColorBrewer 팩키지가 제공하는 팔레트는 정교하게 제작되었지만, 불행히도 고정이다. 인지기반 색상체계를 사용하는 것에 대한 옹호 사례와 더불어 색공간에 0 이 자리하는 것을 알려주는 중요성을 시연하고 있다. “Why Should Engineers and Scientists Be Worried About Color?” 3.3 프린터 색상모형: CMYK 5 6 CMYK 색상표는 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)를 원색으로 하여 명도가 낮아지는 감산혼합으로 주로 출력물 인쇄 혹은 사진 필림 현상에 사용되며 쿼크익스프레스, 일러스트레이터, 포토샵 등에서 CMYK 감산혼합을 지원한다. 현실적인 문제 때문에 RGB나 HSB(HSV)보다 표현 가능한 색이 적은 것으로 알려져 있다. 학창시절 감산혼합의 색의 3원색은 빨강, 노랑, 파랑인데, CMYK는 생뚱맞게도 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)을 원색으로 하는데 이유는 빨강은 사실 자홍색(마젠타), 파랑은 청록색(시안)이라 정확한 색상이 후자가 맞다. 우리가 잘못 배운 탓이 크다. RGB 생상과 CMYK 생상을 PDF 파일로 찍어 상호 비교해보자. 7 RGB 색상 출력 CMYK 색상 출력 3.4 RColorBrewer 와 viridis 3.4.1 RColorBrewer 색상선택이 가장 논란이 많고, 이리저리 만지작 거리면서 정말 많은 시간을 보내는 분야다. 지리학자이며 생상 전문가 Cynthia Brewer 교수가 출판과 웹에서 사용되는 색상표를 제작했고, 이는 RColorBrewer 팩키지에 반영되어 있다. 팩키지를 설치하고 사용하면 된다. 연관된 전체 팔레트를 살펴보는 명령어는 display.brewer.all() 이다. 팔레트는 종류가 많지만 다음 세가지 범주에 속한다. 위에서 아래부터 다음과 같다. 순차적(sequential) : 낮은 것에서 높은 것으로 한쪽 극단이 흥미롭고 반대쪽 극단이 재미없는 것을 시각화하는데 매우 좋다. 예를 들어 p-값, 상관계수 (주의: 상관계수 1 이 흥미로운 것은 양수를 가정했다) 정량적(quantitative) : 순서가 없는 범주형 자료를 시각화할 때 유용하다. 예를 들어, 국가나 대륙. 특수한 “쌍을 이룬” 팔레트가 있다; 예를 들어, 곡물 밀 유형같이 실험이 아닌 요인, 실험군과 대조군 같은 이진 실험 요인. 발산하는(diverging) : 극단의 음수에서 극단의 양수까지 범위를 같는 것을 시각화하는데 유용한다. 이런 데이터는 극단의 값이 중간에 위치한 덜 흥미로운 지점을 지난다. 예를 들어, t-통계량, z-점수, 상관계수가 이에 속한다. 명칭을 명세해서 RColorBrewer 팔렛트 하나만 볼 수 있다. 3.4.2 viridis 2015년 Stéfan van der Walt 와 Nathaniel Smith는 파이썬 matplotlib 팩키지에 사용될 새로운 색상 지도를 설계했고, SciPy 2015에서 발표했다. viridis 팩키지로 인해 R에 4가지 신규 팔레트가 추가되었다. CRAN과, GitHub에서 팩키지를 만날 수 있다. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} viridis 색상표는 완벽하게 균등하게 지각되도록 설계되었고, 정규형식에서나 흑백으로 전환되었을 때도 마찬가지다. 또한 색망을 갖는 독자도 올바르게 지각될 수 있도록 설계되었다. 아직 나온지 얼마되지 않아서, 자세한 사항은 viridis 팩키지를 설치하고 소품문을 읽고 직접 경험하기 바란다. 3.4.3 색맹을 갖는 사람 dichromat 팩키지(CRAN)는 2색시자에 대한 효과적인 색상조합을 선택하는데 도움이 된다. colorschems 목록에는 17 가지 색상조합이 담겨있는데, 적색과 녹색을 구별하는 능력이 없거나 예외적인 시력을 갖는 2색시자에게 적합하다. dichmat() 함수는 색상을 변환해서 다른 형태의 색맹에 근사적인 효과를 구현할 수 있어서, 후보 색상조합에 대한 효과를 평가할 수 있게 한다. data(\"dalton\") 명령어는 256 색상 팔레트를 표현하는 객체를 생성하는데, 정상 시야로 표현되는 것과, 적록(red-green) 색맹과 청녹(green-blue) 생맹으로 표현되는 것이다.(Rogowitz and Treinish 1996) References "],["ggplot-component.html", "4 . 구성요소 4.1 시각적 매핑(Aesthetics) 4.2 척도 매핑 4.3 좌표계 4.4 축(axis)", " 4 . 구성요소 깔끔한 데이터(tidy data)가 준비되면 이를 시각화하기 위해서는 데이터를 시각화 객체에 매핑하게 되는 메커니즘이 필요하다. 주요 구성요소로 시각적 매핑(Aesthetics), 척도(Scale), 좌표계(Coordiate System), 축(Axis) 등이 필요하다. 4.1 시각적 매핑(Aesthetics) ggplot에서 시각적 매핑(Aesthetics)는 aes() 내에 시각적으로 표현되는 모든 것을 담고 있다. 시각화 대상은 크게 두가지로 나눠지는데 연속형과 범주형이다. 온도나 몸무게 같은 경우는 특정 두 데이터 값 사이 연속된 값이 있지만, 수학에서 정수와 같이 표현되는 쪼갤 수 없는 경우는 국가를 생각하면 한국과 미국 사이 존재하는 값이 없다. 시각화를 할 경우 위치(position), 모양(shape), 크기(size), 색상(color), 선굵기(line width), 선유형(line type)을 사용하여 좌표계(coordinate system), 척도(scale)와 결합하여 최종 시각화 결과물을 제작된다. Claus Wilke 시각화 책에 언급된 다양한 시각적 매핑을 통해 효과적으로 데이터의 정보를 표현할 수 있다.(Wilke 2019) 당연히 위치, 모양, 크기, 색상, 선굵기, 선유형 중 어떤 것을 사용하느냐에 따라 시각화로 전달되는 정보의 양은 달라진다. 예를 들어, 위치는 시각적 변별력이 선 유형보다 크다. 그림 4.1: 위치, 모양, 크기, 색상, 선굵기, 선유형 등 시각적 매핑 4.2 척도 매핑 데이터가 주어지면 시각적 객체(모양, 색상, 크기 등)와 매핑을 해야 되는데 그 둘 사이를 연결하는 것이 척도(Scale)이다. x축과, y축 척도에 시각적 객체를 매핑해야 비로서 데이터 값을 그래프로 표현된다. 척도에 위치가 지정되면 시각적 매핑 객체를 다양하게 표현할 수 있다. 만약 위치가 척도에 모호하게 표현되게 되면 시각적 객체가 제대로 그래프에 표현되는데 문제가 된다. 그림 4.2: 시각적 객체 척도 매핑 4.3 좌표계 데이터 시각화에서 앞서 데이터를 척도와 시각적 객체로 준비를 했다면 이를 최종 그래프로 제작하기 위해서는 좌표계가 필요하다. 네이버 사전에서 좌표계는 공간상의 한 점의 위치를 표시하는 숫자들의 순서쌍인 좌표를 정하기 위한 체계로서, 원점과 기준 길이, 기준 축이나 기준선들의 집합을 통틀어 이르는 말이다. 가장 널리 사용되는 좌표계는 데카르트 직각좌표계와 극좌표계가 널리 사용된다. 다음은 mtcars 데이터 차량 기통수를 막대그래프와 원그래프를 사용하여 동일한 내용을 좌표계만 달리하여 시각적으로 표현해따. 그림 4.3: 직교좌표계와 극좌표계 4.4 축(axis) 데이터 값을 선형 척도에 매핑하여 시각화하는 것이 일반적이지만 x, y 축이 대표적으로 날짜와 같은 시계열 데이터인 경우 혹은 시분초를 나타내는 경우도 있어 이에 맞춰 적절히 축을 맞춰야 한다. 덧셈이 아니라 곱셈에 대해 선형인 경우 로그변환을 취하여 데이터 본연의 척도를 반영하도록 축을 조정한다. 많이 사용되는 로그 변환의 경우 밑을 10으로 하는 상용로그와 자연로그가 있어 명확히 축라벨에 적시하여 혼동을 피하는 것이 좋다. 로그 변환시 0이 있는 경우 문제가 되기 때문에 sqrt() 변환도 로그변환이 갖는 표현법의 장점을 갖추면서도 로그변환 시 생기는 번거러움을 해소하기 자주 사용된다. 그림 4.4: 선형, 로그, 제곱근 축 References "],["시각화-전용-데이터.html", "시각화 전용 데이터", " 시각화 전용 데이터 "],["tidy-data.html", "5 . 깔끔한 데이터 개념 5.1 데이터 깔끔화 5.2 깔끔한 데이터 5.3 엉망진창 데이터 5.4 깔끔한 데이터 사례 5.5 깔끔한 데이터 제작 코드", " 5 . 깔끔한 데이터 개념 div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} 톨스토이 장편소설 “안나 카레니나”에 나오는 유명한 문구로 행복한 가정 원칙이 있다. “행복한 가정은 모두 비슷한 이유로 행복하지만 불행한 가정은 저마다의 이유로 불행하다.” (“Все счастливые семьи похожи друг на друга, каждая несчастливая семья несчастлива по-своему”, Happy families are all alike, but every unhappy family is unhappy in its own way.) 유발 하라리도 이를 차용하여 “세상에 실패한 국가의 유형도 각기 저마다의 이유로 다르지만, 성공한 국가는 비슷한 이유를 갖는다”라고 주장했고, 해들리 위컴(Hadley Wickham)도 “Like families, tidy datasets are all alike but every messy dataset is messy in its own way.” Tidy Data에 대한 정의를 내리면서 동일한 주장을 했다. 5.1 데이터 깔끔화 시각화를 하기 전에 데이터를 깔끔하게 해야하는 이유는 근본적으로 사람이 보는 데이터와 기계가 처리하는 데이터의 형태가 다르기 때문이다. 즉, 사람이 보기 좋은 데이터는 기계가 처리하기 어렵고, 기계가 처리하기 좋은 형태는 사람이 보고 이해하는데 어려움이 있다. 따라서, 시각화를 위한 깔끔한 데이터(Tidy datasets)가 준비되면, 데이터를 조작하고, 모형화하고, 시각화는 물론이고 커뮤니케이션도 용이하다. 깔끔한 데이터 원칙은 코드(Codd) 박사의 관계대수(relational algebra) 와 깊은 관련이 있지만, 통계학 전공자에게 친숙한 언어로 표현하여 데이터를 다루는 실무에 익숙한 통계학자와 데이터 분석가에 적합하다. 깔끔한 데이터는 특정한 구조를 갖추고 있는데 변수 는 열(column)이고, 관측점 은 행(row)이며, 행과 열이 교차하는 셀(Cell)은 값(Value)이 위치하게 되고 관측단위에 대한 형태 는 테이블(table)로 구성된다. (Wickham 2014) 해당 데이터셋에 관측점과 변수를 식별하는 것이 쉽게 생각되지만, 일반적으로 변수와 관측점을 정확하게 정의하는 것이 놀랍게도 어렵다. 행과 행보다는 변수간 기능적 관계(functional relationship)를 기술하는 것이 더 쉽기 때문에 칼럼 그룹집단 비교보다 관측점 그룹집단 사이 비교를 하는 것이 더 쉽다. 최근에 rowwise() 연산자가 도입되어 필요한 경우 행으로 데이터 작업하는 것도 수월해졌다. 5.2 깔끔한 데이터 깔끔한 데이터는 데이터셋의 의미를 구조에 매칭하는 표준적인 방식이다. 행, 열, 테이블이 관측점, 변수, 형식에 매칭되는 방식에 따라 데이터셋이 깔끔하거나 깔끔하지 않은 것으로 나뉜다. 깔끔한 데이터(tidy data) 는 결국 데이터 분석을 쉽게 할 수 있는 데이터로 볼 수 있다. 각 변수가 칼럼이 된다. 각 관측점은 행이 된다. 각 셀은 값이 된다. 관측 단위에 대한 형태가 테이블을 구성한다. 저장 구분 의미 테이블/파일(table/file) 데이터셋 (dataset) 행(row) 관측점 (observation) 열(column) 변수 (variable) 셀(Cell) 값 (value) div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} 데이터셋(Dataset) 데이터셋은 정량적이면 숫자형, 정성적이면 문자열로 저장되는 값(value) 의 집합이다. 모든 값은 변수(variable) 와 관측점(observation) 에 속하게 된다. 변수에 모든 값은 동일한 속성을 측정하게 되고 (예를 들어, 키, 온도, 기간 등), 관측점은 속성마다 동일한 단위로 측정되는 값이 담겨진다 (예를 들어, 사람, 종족, 날짜). 깔끔한 데이터가 의미가 있으려면 깔끔한 데이터가 입력으로 들어가서 깔끔한 데이터가 입력으로 나와야만 된다. (깔끔한) 데이터 입력 → 함수 f(x) → (깔끔한) 데이터 출력 Tidy-input → 함수 f(x) → Tidy-output 5.3 엉망진창 데이터 깔끔하지 않는 데이터(messy data) 는 앞서 언급한 깔끔한 데이터와 다른 형태 데이터를 지칭한다. 컴퓨터 과학에서 말하는 코드 제3 정규형이지만, 해들리 위컴이 통계적 언어로 다시 표현한 것이다. 또한, 깔끔한 데이터는 R같은 벡터화 프로그래밍 언어에 특히 잘 맞는다. 왜냐하면 동일한 관측점에 대한 서로 다른 변수 값이 항상 짝으로 매칭되는 것을 보장하기 때문이다. 변수와 관측점의 순서가 분석에 영향을 끼치는 것은 아니지만, 순서를 잘 맞춰 놓으면 값을 스캔해서 검색하는 것이 용이하다. 고정된 변수(fixed variable)가 실험계획법에 기술되고 나서 측정된 값이 뒤에 나오는 것처럼 변수와 값에 대한 순위를 잘 맞춰 정리해 놓게 되면 장점이 많다. 깔끔한 데이터를 사실 이해하기는 쉽지 않다. 하지만 엉망진창인 데이터(Messy Data)를 보게 되면 상대적으로 깔끔한 데이터(Tidy Data)에 대한 이해를 높일 수 있다. 깔끔하지 않은 데이터의 대표적인 문제점을 다음과 같이 5가지로 유형화시켜 정리할 수 있다. 칼럼 헤더에 변수명이 아닌 값이 온다. 변수 다수가 한 칼럼에 저장되어 있다. 변수가 행과 열에 모두 저장되어 있다. 관측 단위에 대한 다양한 형태가 동일한 테이블에 저장되어 있다. 한가지 관측 단위가 테이블 다수에 흩어져 저장되어 있다. 깔끔한 데이터가 아닌 보통 데이터 id x y 1 22.19 24.05 2 19.82 22.91 3 19.81 21.19 4 17.49 18.59 5 19.44 19.85 깔끔하게 처리한 데이터 id 변수 값 1 x 22.19 2 x 19.82 3 x 19.81 4 x 17.49 5 x 19.44 1 y 24.05 2 y 22.91 3 y 21.19 4 y 18.59 5 y 19.85 5.4 깔끔한 데이터 사례 깔끔하지 못한 데이터로 지목(?)된 퓨리서치 원데이터는 Pew Research Center Religion &amp; Public Life 웹사이트에서 2015년 다운로드 받았고, GitHub에 데이터가 공유되어 있다. 깔끔하지 않은 messy 상태 데이터를 깔끔한 tidy 상태 데이터로 변환시킨 사례를 통해 실전 감각을 익혀보자. 깔끔하기 전 데이터 종교 &lt;$10k $10-20k $20-30k $30-40k $40-50k $50-75k Agnostic 27 34 60 81 76 137 Atheist 12 27 37 52 35 70 Buddhist 27 21 30 34 33 58 Catholic 418 617 732 670 638 1116 모름/거절 15 14 15 11 10 35 Evangel 575 869 1064 982 881 1486 Hindu 1 9 7 9 11 34 Black Prot 228 244 236 238 197 223 여호와의 증인 20 27 24 24 21 30 Jewish 19 19 25 25 30 95 깔끔하게 만든 후 데이터 religion income freq Agnostic &lt; $10k 27 Agnostic $10-20k 34 Agnostic $20-30k 60 Agnostic $30-40k 81 Agnostic $40-50k 76 Agnostic $50-75k 137 Agnostic $75-100k 122 Agnostic $100-150k 109 Agnostic &gt;$150k 84 Agnostic 모름/거절 96 사실 깔끔하게 정리된 데이터는 사람이 보기에 적합하지는 않다. 오히려 엉망진창인 퓨리서치 원데이터가 사람이 이해하고 보기에는 더 편하다. 5.5 깔끔한 데이터 제작 코드 다운로드 받은 pew.sav 파일을 데이터프레임으로 만든 후 범주형 자료분석을 위해서 요인형(factor) 변수로 수준을 정리한 후 count 함수를 빈도수를 산출한다. religion income n Atheist &lt;$10k 39 Atheist $10-20k 61 Atheist $20-30k 97 Atheist $30-40k 133 Atheist $40-50k 111 Atheist $50-75k 207 Atheist $75-100k 195 Atheist $100-150k 168 Atheist &gt;150k 158 Atheist NA 172 사람이 보기 편한 형태 wide 표형태 데이터는 다음과 같이 나타낼 수 있다. 과거 spread() 동사를 사용했다면 직관적인 함수인 pivot_wider()를 사용하는 것이 좋다. 인자도 names_from=, values_from= 을 사용해서 머릿속에 담긴 내용이 코드에 직관적으로 담기도록 코딩한다. income Atheist Buddhist Catholic Muslim Orthodox $10-20k 61 21 617 7 17 $20-30k 97 30 732 9 23 $30-40k 133 34 670 10 32 $40-50k 111 33 638 9 32 $50-75k 207 58 1116 23 47 $75-100k 195 62 949 16 38 $100-150k 168 39 792 8 42 References "],["ggplot-datasets.html", "6 . 준비된 데이터 6.1 팔머 펭귄 6.2 갭마인더", " 6 . 준비된 데이터 시각화 작업을 할 때 가장 문제되는 것 중 하나가 원천데이터다. 데이터가 깔끔하게 준비되어 있으면 시각화 업무에 집중하여 놀라운 성과물을 낼 수 있다. 반면에 데이터가 엉망진창인 경우 시각화 범위도 축소되고 시각화 각 단계를 건널 때마다 문제를 해결해 가면서 시각화 작업을 수행하게 되어 노력대비 기대한 산출물을 얻을 가능성은 낮아진다. 데이터 사이언스와 시각화의 예제 데이터로 가장 많이 추천되는 것이 갭마인더(gapminder)와 팔머펭귄(palmerpenguins) 데이터셋이다. 두 데이터셋 모두 CRAN에 등록된 공식 데이터 패키지다. 6.1 팔머 펭귄 미국에서 “George Floyd”가 경찰에 의해 살해되면서 촉발된 “Black Lives Matter” 운동은 아프리카계 미국인을 향한 폭력과 제도적 인종주의에 반대하는 사회운동이다. 데이터 과학에서도 최근 R.A. Fisher의 과거 저술한 “The genetical theory of natural selection” (Fisher 1958) 우생학(Eugenics) 대한 관점이 논란이 되면서 R 데이터 과학의 첫 데이터셋으로 붓꽃 iris 데이터를 다른 데이터, 즉 펭귄 데이터로 대체하는 움직임이 활발히 전개되고 있다. palmerpenguins 데이터셋이 대안으로 많은 호응을 얻고 있다. 6.1.1 펭귄 공부 팔머(Palmer) 펭귄은 3종이 있으며 자세한 내용은 다음 링크된 나무위키에서 참조 가능하다. 젠투 펭귄(Gentoo Penguin): 머리에 모자처럼 둘러져 있는 하얀 털 때문에 알아보기가 쉽다. 암컷이 회색이 뒤에, 흰색이 앞에 있다. 펭귄들 중에 가장 빠른 시속 36km의 수영 실력을 자랑하며, 짝짓기 할 준비가 된 펭귄은 75-90cm까지도 자란다. 아델리 펭귄(Adelie Penguin): 프랑스 탐험가인 뒤몽 뒤르빌(Dumont D’Urville) 부인의 이름을 따서 ’아델리’라 불리게 되었다. 각진 머리와 작은 부리 때문에 알아보기 쉽고, 다른 펭귄들과 마찬가지로 암수가 비슷하게 생겼지만 암컷이 조금 더 작다. 턱끈 펭귄(Chinstrap Penguin): 언뜻 보면 아델리 펭귄과 매우 비슷하지만, 몸집이 조금 더 작고, 목에서 머리 쪽으로 이어지는 검은 털이 눈에 띈다. 어린 고삐 펭귄들은 회갈색 빛을 띄는 털을 가지고 있으며, 목 아래 부분은 더 하얗다. 무리를 지어 살아가며 일부일처제를 지키기 때문에 짝짓기 이후에도 부부로써 오랫동안 함께 살아간다. 팔머 펭귄 3종 세트 다음으로 iris 데이터와 마찬가지로 펭귄 3종을 구분하기 위한 변수로 조류의 부리에 있는 중앙 세로선의 융기를 지칭하는 능선(culmen) 길이(culmen length)와 깊이(culmen depth)를 이해하면 된다. 팔머 펭귄 능선 변수 6.1.2 데이터셋 설치 CRAN에 등록되어 있어 install.packages() 함수로 직접 설치해도 되고, remotes 팩키지 install_github() 함수로 GitHub 저장소의 팔머펭귄 데이터를 설치해도 된다. 정식 CRAN에 등록되기 이전에 GitHub에 먼저 등록되어 몇년간 정제과정을 거쳐 초기부터 사용하신 분은 GitHub 저장소 설치가 편할 수 있다. 안정화 되었기 때문에 CRAN 데이터나 GitHub 데이터나 이제 차이는 없다. 도서관에서 책을 꺼내 열람실에서 살펴보듯이 설치된 palmerpenguins 데이터셋을 library(palmerpenguins) 함수로 불러온다. 책에 어떤 내용이 담겼는지 살펴보듯이 tidyverse를 구성하는 dplyr 패키지 glimpse() 함수로 펭귄 데이터를 일별한다. ## Rows: 344 ## Columns: 8 ## $ species &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel… ## $ island &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse… ## $ bill_length_mm &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, … ## $ bill_depth_mm &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, … ## $ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186… ## $ body_mass_g &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, … ## $ sex &lt;fct&gt; male, female, female, NA, female, male, female, male… ## $ year &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007… 6.1.3 자료구조 일별 skimr 패키지를 사용해서 penguins 데이터프레임 자료구조를 일별한다. 이를 통해서 344개 펭귄 관측값이 있으며, 7개 칼럼으로 구성된 것을 확인할 수 있다. 또한, 범주형 변수가 3개, 숫자형 변수가 4개로 구성되어 있다. 그외 더 자세한 사항은 범주형, 숫자형 변수에 대한 요약 통계량을 참조한다. Table 6.1: Data summary Name penguins Number of rows 344 Number of columns 8 _______________________ Column type frequency: factor 3 numeric 5 ________________________ Group variables None Variable type: factor skim_variable n_missing complete_rate ordered n_unique top_counts species 0 1.00 FALSE 3 Ade: 152, Gen: 124, Chi: 68 island 0 1.00 FALSE 3 Bis: 168, Dre: 124, Tor: 52 sex 11 0.97 FALSE 2 mal: 168, fem: 165 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist bill_length_mm 2 0.99 43.9 5.46 32.1 39.2 44.5 48.5 59.6 ▃▇▇▆▁ bill_depth_mm 2 0.99 17.1 1.97 13.1 15.6 17.3 18.7 21.5 ▅▅▇▇▂ flipper_length_mm 2 0.99 200.9 14.06 172.0 190.0 197.0 213.0 231.0 ▂▇▃▅▂ body_mass_g 2 0.99 4201.8 801.95 2700.0 3550.0 4050.0 4750.0 6300.0 ▃▇▆▃▂ year 0 1.00 2008.0 0.82 2007.0 2007.0 2008.0 2009.0 2009.0 ▇▁▇▁▇ 데이터가 크지 않아 인터랙티브 reactive, DT 패키지를 통해 전체 데이터를 살펴볼 수도 있고, 첫 10개 관측점만 뽑아 일별할 수도 있다. ## # A tibble: 10 × 8 ## species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; ## 1 Adelie Torge… 39.1 18.7 181 3750 male ## 2 Adelie Torge… 39.5 17.4 186 3800 fema… ## 3 Adelie Torge… 40.3 18 195 3250 fema… ## 4 Adelie Torge… NA NA NA NA &lt;NA&gt; ## 5 Adelie Torge… 36.7 19.3 193 3450 fema… ## 6 Adelie Torge… 39.3 20.6 190 3650 male ## # … with 4 more rows, and 1 more variable: year &lt;int&gt; 6.1.4 탐색적 데이터 분석 palmerpenguins 데이터셋 소개에 포함되어 있는 미국 팔머 연구소 (palmer station) 펭귄 물갈퀴(flipper) 길이와 체질량(body mass) 산점도를 그려보자. 그래프 문법에 따라 x, y 축을 데이터프레임 변수로 매핑하고 산점도의 각 펭귄 물갈퀴 길이(flipper_length_mm)와 체질량(body_mass_g)은 펭귄 종에 따라 geom_point()로 색상과 모양을 달리한다. 6.2 갭마인더 ‘팩트풀니스’(Factfullness)는 ’사실충실성’으로 번역되고 팩트(사실)에 근거해 세계를 바라보고 이해하는 태도와 관점을 의미하는 것으로 얼마전 타계한 한스 로슬링의 마지막 저서 “Factfulness”의 책제목으로 더 유명하다. 저자는 세계에 관한 심각한 무지와 싸움을 평생의 사명으로 삼아 다양한 업적을 남겼으며 데이터 시각화를 통해 그동안 보지 못했던 사실을 일반인이면 누구나 쉽게 이해하고 의사결정을 빠른 시간내에 내릴 수 있도록 도움을 주였다. 그가 남긴 업적중의 하나는 데이터로 통상 gapminder 로 알려져 있으며 제니 브라이언트 박사가 R 데이터 패키지로 제작하여 쉽게 다가설 수 있게 되었다. gapminder 데이터는 시각화는 물론 애니메이션 시각화의 예제로도 많이 사용되고 있다. 갭마인더 데이터셋은 1952년부터 5년 간격으로 2007년까지 142개 국가 인구수, 기대수명(lifeExp), 인구수(pop), 1인당 국민소득(gdpPercap)에 대한 정보를 담고 있어 기대수명과 1인당 국민소득을 통해 1952년부터 국가별 발전사항 다른 관점으로 불평등에 대한 사실을 시각화를 통해 직시할 수 있다. 6.2.1 데이터셋 설치 CRAN에 등록되어 있어 install.packages() 함수로 직접 설치해도 되고, remotes 팩키지 install_github() 함수로 GitHub 저장소의 갭마인더 데이터를 설치해도 된다. 팔머 펭귄 데이터와 마찬가지로 안정화 되었기 때문에 CRAN 데이터나 GitHub 데이터나 이제 차이는 없다. 6.2.2 자료구조 일별 skimr 패키지를 사용해서 gapminder 데이터프레임 자료구조를 일별한다. 이를 통해서 1,704개 펭귄 관측값이 있으며, 6개 칼럼으로 구성된 것을 확인할 수 있다. 또한, 범주형 변수가 2개, 숫자형 변수가 4개로 구성되어 있다. 그외 더 자세한 사항은 범주형, 숫자형 변수에 대한 요약 통계량을 참조한다. Table 6.2: Data summary Name gapminder Number of rows 1704 Number of columns 6 _______________________ Column type frequency: factor 2 numeric 4 ________________________ Group variables None Variable type: factor skim_variable n_missing complete_rate ordered n_unique top_counts country 0 1 FALSE 142 Afg: 12, Alb: 12, Alg: 12, Ang: 12 continent 0 1 FALSE 5 Afr: 624, Asi: 396, Eur: 360, Ame: 300 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist year 0 1 1.98e+03 1.73e+01 1952.0 1.97e+03 1.98e+03 1.99e+03 2.01e+03 ▇▅▅▅▇ lifeExp 0 1 5.95e+01 1.29e+01 23.6 4.82e+01 6.07e+01 7.08e+01 8.26e+01 ▁▆▇▇▇ pop 0 1 2.96e+07 1.06e+08 60011.0 2.79e+06 7.02e+06 1.96e+07 1.32e+09 ▇▁▁▁▁ gdpPercap 0 1 7.22e+03 9.86e+03 241.2 1.20e+03 3.53e+03 9.33e+03 1.14e+05 ▇▁▁▁▁ 데이터가 크지 않아 인터랙티브 reactive, DT 패키지를 통해 전체 데이터를 살펴볼 수도 있고, 첫 10개 관측점만 뽑아 일별할 수도 있다. ## # A tibble: 10 × 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## # … with 4 more rows 6.2.3 탐색적 데이터 분석 gapminder 데이터셋에서 dplyr 패키지 filter() 함수를 이용하여 대륙명이 오세아니아를 제외하고 나머지 대륙(아프리카, 아메리카, 아시아, 유럽)에 속한 국가를 색상을 달리하여 각 국가별로 연도별 기대수명의 변화를 시각화한다. References "],["tidy-data-how.html", "7 . 깔끔화 방법 7.1 깔끔화 동사 7.2 pivot_*() 동사 7.3 인덱스 → 데카르트 평면: pivot_wider() 7.4 separate()와 unite() 7.5 결측 데이터", " 7 . 깔끔화 방법 7.1 깔끔화 동사 dplyr 패키지 데이터 문법에 select, filter, mutate, group_by + summarize, arrange 5개 주요 동사(Verb)를 사용해서 데이터와 커뮤니케이션하며 데이터 조작을 하듯이 tidyr 패키지 깔끔한 데이터 조작 동사를 익혀두면 엉망진창인 데이터에 특효약이다. 깔끔한 데이터(Tidy Data)를 만드는데 동원되는 동사에 해당되는 함수는 다음과 같다. 다음 데이터 깔끔이 함수들을 이용하여 엉망진창인 데이터(Messy Data)를 깔끔한 데이터로 만들어서 후속 작업에 속도를 높일 수 있다. tidyr 팩키지에 포함된 Tidy Data 관련 핵심을 이루는 함수로 다음을 꼽을 수 있다. pivot_longer() / pivot_wider() : 데이터프레임 형태 변환 동사 separate(), separate_rows() / unite() : 변수 쪼개고 합하는 동사 expand_grid() : 결측값 처리 동사 깔끔한 데이터 관련 R 패키지는 해드릴 위컴이 주축이 되어 10년 이상 발전시켜 완성한 개념으로 그 단계 단계마다 개발된 팩키지가 있고 개념을 구체화하며 실제로 구현한 함수들도 점점 진화해 나갔다. 과거 진화과정을 살펴보면 어느 순간 깔끔한 데이터(Tidy Data) 개념과 동시에 도구가 나온 것이 아니라 경험과 새로운 지식이 축적되며 진화를 거듭한 결과로 볼 수 있다. reshape, reshape2 (Wickham 2007) plyr (Wickham 2011) tidyr (Wickham 2013) 엉망진창인 데이터는 빅데이터와 공공데이터가 널려있는 현시점 어디서나 마주할 수 있지만, 다행히도 앞선 데이터 과학자들이 각자 맞닥드린 문제를 해결하며 경험을 공유하고 있다. 다음에 나온 사례가 엉망진창 데이터 전부는 아니지만 각 사례별로 깔끔한 데이터로 변환시키는 과정을 살펴보면 향후 맞닥드릴 수 있는 데이터 문제에 좋은 영감을 줄 것으로 생각된다. 7.2 pivot_*() 동사 해들리 위컴이 언급했듯이, gather/spread는 사라지지 않고 훨씬 더 나은 모습으로 재탄생했습니다. pivot_longer(), pivot_wider() 함수는 gather(), spread() 함수를 개선하면서 다른 팩키지의 최신 기능을 추가시켰다. pivot_longer()은 data.table 패키지 melt(), dcast()와 연관됨. cdata 패키지에 영감을 받아 pivot_longer(), pivot_wider() 명칭으로 통일됨. 기억하기 좋게 인텍스(index)를 갖는 긴 자료형(long)과 데카르트 평면(Cartesian)과 같은 넓은(wide) 자료형으로 구분한다. tidyr 패키지가 버전 1.0으로 정식 버젼업하면서 생겨난 가장 큰 변화 중 하나가 아닐까 싶다. 7.2.1 데카르트 평면 → 인덱스: pivot_longer() pivot_longer() 함수를 사용해서 데카르트 평면과 같이 넓은 데이터(wide)를 인덱스가 붙은 긴 형태(long) 데이터로 변환시킬 수 있다. relig_income 데이터는 gather/spread 시절부터 자주 예제 데이터로 사용되던 예제 데이터셋이다. religion 변수를 제외하고 나머지 변수가 names_to를 통해 인덱스 명을 바꿀 수 있고 이들이 담고 있던 값은 values_to로 떨어지게 된다. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} cols: dplyr::select() 구문과 동일하게 작성함. 데카르트 평면 넓은 데이터 ## # A tibble: 6 × 11 ## religion `&lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agnostic 27 34 60 81 76 137 122 ## 2 Atheist 12 27 37 52 35 70 73 ## 3 Buddhist 27 21 30 34 33 58 62 ## 4 Catholic 418 617 732 670 638 1116 949 ## 5 Don’t k… 15 14 15 11 10 35 21 ## 6 Evangeli… 575 869 1064 982 881 1486 949 ## # … with 3 more variables: `$100-150k` &lt;dbl&gt;, `&gt;150k` &lt;dbl&gt;, ## # `Don&#39;t know/refused` &lt;dbl&gt; 인덱스 긴 형식 데이터 ## # A tibble: 180 × 3 ## religion 소득 사람수 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Agnostic &lt;$10k 27 ## 2 Agnostic $10-20k 34 ## 3 Agnostic $20-30k 60 ## 4 Agnostic $30-40k 81 ## 5 Agnostic $40-50k 76 ## 6 Agnostic $50-75k 137 ## # … with 174 more rows 7.2.2 접두사(prefix) 제거: pivot_longer() names_prefix를 사용해서 $, &lt;$, &gt; 붙은 값을 제거시킬 수 있다. ## # A tibble: 180 × 3 ## religion 소득 명수 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Agnostic 10k 27 ## 2 Agnostic 10-20k 34 ## 3 Agnostic 20-30k 60 ## 4 Agnostic 30-40k 81 ## 5 Agnostic 40-50k 76 ## 6 Agnostic 50-75k 137 ## # … with 174 more rows 7.2.3 자료형 변환: pivot_longer() 빌보드 원본 데이터: 자료변환 전 일단 주간 순위는 어찌해서 만들었지만, 주간 칼럼에 wk가 들어 있어 이를 names_prefix를 통해 날려버리고 나도 숫자로 되어 있는 문자를 다시 숫자형으로 칼럼 자료형을 바꿔야 한다. ## # A tibble: 5,307 × 5 ## artist track date.entered 주간 순위 ## &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 wk1 87 ## 2 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 wk2 82 ## 3 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 wk3 72 ## 4 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 wk4 77 ## 5 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 wk5 87 ## 6 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 wk6 94 ## # … with 5,301 more rows 빌보드 원본 데이터: 자료변환 후 ## # A tibble: 5,307 × 5 ## artist track date.entered 주간 순위 ## &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 1 87 ## 2 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 2 82 ## 3 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 3 72 ## 4 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 4 77 ## 5 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 5 87 ## 6 2 Pac Baby Don&#39;t Cry (Keep... 2000-02-26 6 94 ## # … with 5,301 more rows 7.2.4 다수 칼럼: pivot_longer() who 데이터셋과 같이 다수 칼럼이 포함된 경우가 있을 수 있다. 이런 경우 names_pattern 정규표현식을 적용시켜 변수를 추출할 수 있다. 먼저 who 데이터셋을 살펴보자. new_/new 접두어 sp/rel/sp/ep 진단 구분 m/f 성별 014/1524/2535/3544/4554/65 연령대 먼저, country, iso2, iso3, year 4개 변수는 정리되어 있어 그대로 두고, 나머지 변수를 dplyr::select 문법에 맞춰 선택하고 이를 변경시킨다. names_to로 변수명 3개를 지정하고, new_/new 접두어는 고정되어 names_pattern에서 정규표현식으로 패턴을 적의한다. 이와 더불어 names_ptypes에서 자료형도 함께 지정한다. ## # A tibble: 405,440 × 8 ## country iso2 iso3 year diagnosis gender age count ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;fct&gt; &lt;ord&gt; &lt;int&gt; ## 1 India IN IND 2007 sn m 3544 250051 ## 2 India IN IND 2007 sn f 3544 148811 ## 3 China CN CHN 2013 rel m 65 124476 ## 4 China CN CHN 2013 rel m 5564 112558 ## 5 India IN IND 2007 ep m 3544 105825 ## 6 India IN IND 2007 ep f 3544 101015 ## # … with 405,434 more rows 7.2.5 한행에 다수 관측점: pivot_longer() 한행에 관측점이 다수 있는 재미있는 데이터도 있다. 즉, 첫번째 가정에 아이가 2명 있는데 첫째 아이 생일과 성별, 둘째 아이 생일과 성별이 한 행에 놓여있는 경우가 이에 해당된다. ## # A tibble: 5 × 5 ## family dob_child1 dob_child2 gender_child1 gender_child2 ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 1 1998-11-26 2000-01-29 1 2 ## 2 2 1996-06-22 &lt;NA&gt; 2 NA ## 3 3 2002-07-11 2004-04-05 2 2 ## 4 4 2004-10-10 2009-08-27 1 1 ## 5 5 2000-12-05 2005-02-28 2 1 이를 원하는 이름으로 변경시키기 위해서 names_to=에 .value라는 특수명칭을 사용하여 한 관측점에 다수 관측점 정보가 포함된 문제를 해결한다. ## # A tibble: 9 × 4 ## family child dob gender ## &lt;int&gt; &lt;chr&gt; &lt;date&gt; &lt;int&gt; ## 1 1 child1 1998-11-26 1 ## 2 1 child2 2000-01-29 2 ## 3 2 child1 1996-06-22 2 ## 4 3 child1 2002-07-11 2 ## 5 3 child2 2004-04-05 2 ## 6 4 child1 2004-10-10 1 ## # … with 3 more rows 7.2.6 칼럼명이 중복됨: pivot_longer() 종복된 칼럼명이 존재하는 경우 작업하기 까다로운데… pivot_longer()에서 자동으로 칼럼을 추가시켜 문제를 풀어준다. 중복칼럼 데이터셋 ## # A tibble: 3 × 4 ## x y y y ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 4 5 7 ## 2 2 5 6 8 ## 3 3 6 7 9 중복칼럼 데이터셋 작업결과 ## # A tibble: 9 × 3 ## x name value ## &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 1 y 4 ## 2 1 y 5 ## 3 1 y 7 ## 4 2 y 5 ## 5 2 y 6 ## 6 2 y 8 ## # … with 3 more rows 7.3 인덱스 → 데카르트 평면: pivot_wider() pivot_wider()는 깔끔한 데이터를 만드는데 그다지 흔한 경우는 아니지만, 요약표를 만드거나 할 때 종종 사용되고, pivot_longer()와 정반대라고 보면 된다. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;} names_from은 칼럼값을 지정하는 칼럼 values-from은 값(value)을 지정하는 칼럼 tidyr::fish_encounters 패키지에 내장된 fish_encounters 데이터셋은 “Visualizing Fish Encounter Histories”, February 3 2018에 나온 물고기 포획 방류, 재포획 즉, capture-recapture 데이터셋이다. pivot_wider() 함수에 names_from, value_from을 지정하여 데카르트 평면에 좌표로 찍듯이 데이터를 펼친다. 결측값이 생기는 것은 values_fill을 사용해서 0으로 채워넣게 되면 결측값도 정리되고 사람이 이해하기 쉬운 데이터로 즉시 일별하여 확인이 가능하다. 깔끔한 데이터: 인덱스 긴 형식 ## # A tibble: 114 × 3 ## fish station seen ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 4842 Release 1 ## 2 4842 I80_1 1 ## 3 4842 Lisbon 1 ## 4 4842 Rstr 1 ## 5 4842 Base_TD 1 ## 6 4842 BCE 1 ## # … with 108 more rows 요약표 형태 데이터 ## # A tibble: 10 × 12 ## fish Release I80_1 Lisbon Rstr Base_TD BCE BCW BCE2 BCW2 MAE MAW ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 4842 1 1 1 1 1 1 1 1 1 1 1 ## 2 4843 1 1 1 1 1 1 1 1 1 1 1 ## 3 4844 1 1 1 1 1 1 1 1 1 1 1 ## 4 4845 1 1 1 1 1 0 0 0 0 0 0 ## 5 4847 1 1 1 0 0 0 0 0 0 0 0 ## 6 4848 1 1 1 1 0 0 0 0 0 0 0 ## # … with 4 more rows 7.3.1 총계(aggregation): pivot_wider() pivot_wider()를 통해 총계(aggregate)를 내야하는 상황이 발생하곤 한다. datasets 패키지에 내장된 실험계획법이 적용된 데이터 warpbreaks를 보면 wool, tension 두가지 요인으로 총 9번 실험한 결과가 breaks에 담겨진 것을 확인할 수 있다. ## # A tibble: 6 × 3 ## wool tension n ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 A L 9 ## 2 A M 9 ## 3 A H 9 ## 4 B L 9 ## 5 B M 9 ## 6 B H 9 현재 인덱스로 잘 정제된 긴형태 데이터를 요약표 형태로 데카르트 평면과 같이 정리하고자 하면 다음과 같이 작업하게 되면 wool, tension 요인별로 총 9개 breaks값이 한 곳에 몰려있는 것을 파악할 수 있다. values_fn을 사용해서 총계로 평균, 최대, 최소 등을 사용해서 하나의 값으로 요약할 수 있다. 요인별 원데이터 ## # A tibble: 3 × 3 ## tension A B ## &lt;fct&gt; &lt;list&gt; &lt;list&gt; ## 1 L &lt;dbl [9]&gt; &lt;dbl [9]&gt; ## 2 M &lt;dbl [9]&gt; &lt;dbl [9]&gt; ## 3 H &lt;dbl [9]&gt; &lt;dbl [9]&gt; 요인별 총계: 최대값 ## # A tibble: 3 × 3 ## tension A B ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 L 70 44 ## 2 M 36 42 ## 3 H 43 28 7.4 separate()와 unite() 7.4.1 칼럼에 변수 두개 포함 칼럼 하나에 다수 변수가 포함된 경우를 흔히 발견할 수 있다. dplyr 팩키지에는 starwars 데이터셋에 등장하는 인물에 대한 인적정보가 담겨있다. 예를 들어, name 칼럼은 두 변수가 숨어 있다. 하나는 성(last name) 다른 하나는 이름(first name)이다. 이를 두개로 쪼개어 두는 것이 Tidy Data를 만든다고 볼 수 있다. 꼭 그런 것은 아니고 경우에 따라 차이가 있지만, 개념적으로 그렇다는 것이다. 상황에 맞춰 유연하게 사용한다. ## # A tibble: 35 × 4 ## name species height mass ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Luke Skywalker Human 172 77 ## 2 Darth Vader Human 202 136 ## 3 Leia Organa Human 150 49 ## 4 Owen Lars Human 178 120 ## 5 Beru Whitesun lars Human 165 75 ## 6 Biggs Darklighter Human 183 84 ## # … with 29 more rows separate() 함수를 사용해서 칼럼을 두개로 쪼갠다. 이런 경우 sep= 인자를 통해 구분자를 지정한다. 공백, ;, , 등 문제에 따라 구분자를 달리 사용한다. ## # A tibble: 35 × 5 ## first_name last_name species height mass ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Luke Skywalker Human 172 77 ## 2 Darth Vader Human 202 136 ## 3 Leia Organa Human 150 49 ## 4 Owen Lars Human 178 120 ## 5 Beru Whitesun Human 165 75 ## 6 Biggs Darklighter Human 183 84 ## # … with 29 more rows 7.4.2 칼럼에 변수 다수 포함 TidyTuesday에서 나왔던 칵테일 데이터를 보게 되면 각 칵테일을 제작하는데 필요한 재표가 ingredient 칼럼 안에 콤마(,)로 묶여있다. 이런 데이터는 절대로 Tidy한 데이터가 아니라서 적절한 조치가 필요하다. ## # A tibble: 546 × 2 ## drink ingredient ## &lt;chr&gt; &lt;chr&gt; ## 1 &#39;57 Chevy with a White License Plate Creme de Cacao, Vodka ## 2 1-900-FUK-MEUP Absolut Kurant, Grand Marnier, Chambord … ## 3 110 in the shade Lager, Tequila ## 4 151 Florida Bushwacker Malibu rum, Light rum, 151 proof rum, Da… ## 5 155 Belmont Dark rum, Light rum, Vodka, Orange juice ## 6 24k nightmare Goldschlager, Jägermeister, Rumple Minze… ## # … with 540 more rows 먼저 stringr 팩키지 str_split() 함수로 ingredient 칼럼을 ,을 구분자로 삼아 쪼갠 후에 list-column 형태 칼럼(ingredient_lc)으로 저장시킨다. 그리고 나서 unnest() 함수로 중첩된 것을 풀게 되면 다음과 같은 티블 데이터프레임이 되어 Tidy Data로 변환된다. ## # A tibble: 2,104 × 3 ## drink ingredient ingredient_lc ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &#39;57 Chevy with a White License Plate Creme de Cacao, Vodka Creme de Cac… ## 2 &#39;57 Chevy with a White License Plate Creme de Cacao, Vodka Vodka ## 3 1-900-FUK-MEUP Absolut Kurant, Grand Marn… Absolut Kura… ## 4 1-900-FUK-MEUP Absolut Kurant, Grand Marn… Grand Marnier ## 5 1-900-FUK-MEUP Absolut Kurant, Grand Marn… Chambord ras… ## 6 1-900-FUK-MEUP Absolut Kurant, Grand Marn… Midori melon… ## # … with 2,098 more rows 자, 이제 깔끔한 데이터의 힘을 느껴보자. 칵테일 중에 가장 다양한 재료가 포함된 칵테일은 무엇인가? 라는 질문에 단순한 dplyr 동사로 확인이 바로 가능하다. ## # A tibble: 546 × 2 ## drink num_ingredients ## &lt;chr&gt; &lt;int&gt; ## 1 Angelica Liqueur 12 ## 2 Amaretto Liqueur 11 ## 3 Egg Nog #4 11 ## 4 Arizona Twister 9 ## 5 1-900-FUK-MEUP 8 ## 6 151 Florida Bushwacker 8 ## # … with 540 more rows 7.4.3 separate_rows() 함수로 빠르게 상기 과정이 다소 많은 동사를 조합해서 결과를 도출하고 있다고 생각된다면 separate_rows() 함수를 사용해서 깔끔한 데이터를 만든 후에 count 함수와 sort = TRUE를 활용하여 동일한 작업을 간단히 마무리 할 수 있다. ## # A tibble: 546 × 2 ## drink n ## &lt;chr&gt; &lt;int&gt; ## 1 Angelica Liqueur 12 ## 2 Amaretto Liqueur 11 ## 3 Egg Nog #4 11 ## 4 Arizona Twister 9 ## 5 1-900-FUK-MEUP 8 ## 6 151 Florida Bushwacker 8 ## # … with 540 more rows 7.5 결측 데이터 data.world Nuclear Weapon Explosions BY THOMAS DRÄBING 웹사이트에서 핵폭탄 실험 데이터를 다운로드 받을 수 있다. 데이터 자체는 완벽하지만 의미상 문제가 있다. 즉 1945년 이후 데이터를 보자면 숨어있는 결측값이 보인다. 확인이 안된 것 한건 빼면 7개국이 핵폭탄 실험을 한 것으로 나오는데 1945년에는 아무런 기록이 없다. 데이터프레임에는 정상인 깔끔한 데이터지만 사실 1945년 0 건에 예를 들어 중국이나 러시아가 포함되어 있는 것이 맞다. 이런 데이터 자체 결측값을 찾아내서 채워넣는 것이 깔끔한 데이터를 만드는 또하나 중요한 과정이다. ## # A tibble: 13 × 3 ## 국가 연도 핵실험횟수 ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 USA 1945 3 ## 2 USA 1946 2 ## 3 USA 1948 3 ## 4 Russia 1949 1 ## 5 Russia 1951 2 ## 6 USA 1951 16 ## # … with 7 more rows 7.5.1 결측값 명시: expand_grid() 상기와 같은 문제를 해결하기 위해 expand_grid() 함수를 사용해서 핵실험을 수행한 모든 국가에 대해 해당 년도를 모두 생성할 필요가 있다. 3개 국가에 대해 10년을 expand_grid() 함수로 조합하게 되면 30개 관측점이 생기는데 미국이 핵실험을 하지 않은 1947년의 경우 NA 값이 생긴다. 이를 채워주어야 한다. 앞서 expand_grid() 함수로 생성된 Tidy Data를 염두에 두고 이를 left_join() 함수와 조인을 걸어 나중에 치환시킬 데이터프레임을 사전 제작한다. ## # A tibble: 30 × 3 ## 국가 연도 핵실험횟수 ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 USA 1945 3 ## 2 USA 1946 2 ## 3 USA 1947 NA ## 4 USA 1948 3 ## 5 USA 1949 NA ## 6 USA 1950 NA ## # … with 24 more rows 7.5.2 결측값 치환: replace_na() 결측값을 특정 값으로 채워 넣고자 하는 경우 replace_na() 함수를 사용한다. 먼저 replace_na() 함수를 사용해서 n_bombs 변수에 NA 결측값을 0으로 채워넣는다. 다른 국가명이나 연도에 결측값이 있는 경우 동일하게 변수명을 지정하고 결측값을 지정하여 해결한다. ## # A tibble: 30 × 3 ## 국가 연도 핵실험횟수 ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 USA 1945 3 ## 2 USA 1946 2 ## 3 USA 1947 0 ## 4 USA 1948 3 ## 5 USA 1949 0 ## 6 USA 1950 0 ## # … with 24 more rows 7.5.3 결측값 제거: drop_na() 다른 것 다 모르겠고 데이터프레임에 결측값이 있으면 안되기 때문에 그냥 제거한다. 이럴 때 사용하는 함수가 drop_na()다. ## # A tibble: 13 × 3 ## 국가 연도 핵실험횟수 ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 USA 1945 3 ## 2 USA 1946 2 ## 3 USA 1948 3 ## 4 USA 1951 16 ## 5 USA 1952 10 ## 6 USA 1953 11 ## # … with 7 more rows "],["시각화.html", "시각화", " 시각화 "],["ggplot.html", "8 . 그래프 문법 8.1 그래프 문법의 존재이유 8.2 그래프 문법 8.3 ggplot 확장", " 8 . 그래프 문법 8.1 그래프 문법의 존재이유 Leland Wilkinson의 “The Grammar of Graphics”는 1999년 첫 출간된 이후 데이터 그래픽(data graphics)에 많은 영향을 주어 ggplot2, Polaris → Tableau, Vega-Lite 등의 형태로 우리곁에 다가섰다. 기존 데이터를 시각화한 다양한 그래픽 객체를 만드려면 각 그래픽 객체별로 따로 사용법을 익혀야만 되었다. 이것이 갖는 한계는 그래프 종류가 적은 경우 유용하지만 그래프 종류가 많아지면 매번 따로 사용법을 배워야되서 확장가능성이 무척 떨어지게 된다. 그래서, 이를 일반화한 무언가 필요한데 데이터 그래픽 객체를 분해해서 8개 계층으로 분해하여 조립하여 그래프를 제작하게 되면 앞선 문제를 일거에 해소할 수 있다. 그래프 문법(grammar of graphics)을 통해 데이터를 가장 잘 표현할 수 있는 그래프를 생성할 수 있게 되었다. ggplot이 필요한 이유 8.2 그래프 문법 그래프 문법은 총 8가지 층으로 구성되어 있는데 이를 각 층별로 나눠보면 다음과 같다. 8.2.1 데이터(Data) 그래프 문법 ggplot에 데이터는 깔끔한 데이터(tidy data)를 가정한다. 이를 위해서 기존 wide형태 데이터는 key-value long 형태로 바뀌어 준비한다. 깔끔한 데이터 wide, long 데이터 8.2.2 매핑(Mapping) 깔끔한 데이터가 준비되면 다음 단계로 칼럼에 해당되는 각 변수를 aes() 함수를 사용해서 aes(x=x, y=y, color=z, ...)와 같은 방식으로 데이터와 그래프를 매핑한다. 데이터를 그래프에 매핑 8.2.3 통계량(statistics) 범주형 그래프를 시각화할 경우 빈도수를 통계량으로 계산해놔야 하고, 연속형 변수를 히스토그램으로 표현할 때도 마찬가지 방식으로 구간별 빈도수를 계산해놔야 하고, 특히 상자그림(boxplot)을 시각화할 경우 각 분위수는 물론이고 중위수도 및 interquantile도 계산해서 수염의 끝도 계산해놔야 제대로된 상자그림을 시각화할 수 있다. 그래프별 기본설정 통계량 8.2.4 척도(scales) X축, Y축의 척도를 그래프에서 자동으로 인식하는데는 한계가 있어 이를 필요한 경우 적절한 형태로 설정한다. scale_&lt;x, y, color, fill, ...&gt;_&lt;유형&gt;() 구문을 갖는다. 예를 들어 Y축을 담당하는 변수가 로그척도(log)가 적합한 경우 이를 scale_y_log10()와 같이 변수를 특성을 반영한 척도를 설정한다. 변수가 날짜나 시간인 경우 scale_x_date(), scale_x_datetime()을 활용하여 적절한 형태로 설정한다. aes 매핑된 축 척도지정 8.2.5 기하형상(geometries) 예를 들어, 범주형 변수를 aes()로 지정하고 이를 적절한 그래프로 표현하기 위한 결정과정으로 geom_*() 방식으로 원그래프, 막대그래프, 점그래프 등으로 변수를 시각화객체로 지정한다. 기하형상 지정 8.2.6 작은 창(facet) 원본 데이터를 그룹으로 쪼개 작은 창에 동일한 시각화 객체를 표현하는 방법으로 다차원 데이터를 차원별로 나눠 볼 수 있다. 중요한 점은 각 작은 창이 동일한 유형의 그래프라는 점이 중요하다. 그룹으로 쪼갠 작은 창(facet) 8.2.7 좌표계(coordinate) 깔끔한 데이터를 그래프에 매칭하여 시각화한 후에 경우에 따라서 좌표계를 변경할 경우가 있다. coord_fixed(), coord_polar(), coord_flip() 등을 사용해서 특정 영역 확대, 데카르트 좌표계에서 극좌표계, X-Y 축 변경 등의 작업을 수행할 수 있다. 좌표계 변환 8.2.8 분위기 풍(theme) 분위기 풍(theme)은 앞선 깔끔한 데이터를 시각화 객체로 변환시키는 과정과 아무런 연관이 없다. 대신 외양을 보기좋게 하는 역할을 수행한다. 즉, 시각화에 알맞는 색상 팔레트를 적용시키고, 글꼴을 바꾸는 작업이 여기에 해당된다. tufte 분위기 풍(theme) 8.3 ggplot 확장 기본 ggplot 그래프 객체를 갖게 되면 2개 이상의 그래프를 합치거나 배열을 달리하고, 강조를 하고 주석(annotation)을 달고 애니메이션과 인터랙티브 기능을 추가하여 확장시킬 수 있다. "],["ggplot-pattern.html", "9 . 시각화 패턴 9.1 라벨 붙은 시계열 9.2 막대그래프 그룹별 색상 9.3 추세선 강조 + 라벨 9.4 롤리팝(lolli-pop) 그래프 9.5 아령(dumbbell) 그래프 9.6 경사(Slope) 그래프", " 9 . 시각화 패턴 9.1 라벨 붙은 시계열 시계열 데이터를 제작하게 되면 추세를 파악할 수 있지만 결국 그래서 가장 최근 값이 어떻게 되는지 관심이 많다. 이런 사용자 요구를 맞추는데 시계열 데이터 마지막 시점에 라벨값을 붙이게 되면 가독성도 좋아진다. 기본적인 작업흐름은 데이터셋에서 가장 최근 관측점을 뽑아서 별도 데이터프레임으로 저장하고 이를 geom_text() 혹은 geom_text_repel() 함수를 사용해서 해결한다. BLOGR 님이 작성한 Label line ends in time series with ggplot2 코드를 참조하여 ggplot으로 코드를 작성한다. 9.2 막대그래프 그룹별 색상 RStudio를 거쳐 IBM에서 근무하고 있는 Alison Presmanes Hill 의 GitHub 저장소에 공개된 TV 시리즈 데이터를 사용해서 막대그래프를 작성할 때 그룹별 색상을 적용하여 가시성을 높인다. TV 시리즈별 색상을 달리할 경우 RColorBrewer 패키지 생상 팔레트를 범주형에 맞춰 각 시리즈별로 가장 잘 구분될 수 있도록 색상을 칠해 시각화를 한다. 9.3 추세선 강조 + 라벨 시각화의 백미는 아무래도 대조와 비교를 통해 강한 인상을 주는 것이다. 앞선 ratings TV 시리즈 시청자 평가 데이터를 대상으로 추세선에 강조를 넣고 라벨 텍스트도 넣어 하이라이트 강조 그래프를 작성해보자. geom_line()을 두개 포함시켜 강조하고하는 색상을 별도로 지정하고 선굵기도 달리한다. 라벨도 동일한 방법으로 geom_text()를 두개 포함시켜 강조하고자하는 색상과 글꼴크기도 달리 지정한다. 9.4 롤리팝(lolli-pop) 그래프 롤리팝(Lollipop) 사탕 그래프는 막대그래프와 클리블랜드 점그래프를 합성한 것으로 한축에는 연속형, 다른 한축에는 범주형을 두고 사용자의 관심을 점그래프로 집중시키는데 효과적이다. 단순히 막대그래프를 제작하는 것과 비교하여 임팩트있는 시각화를 가능하게 한다. 제작순서는 막대그래프 → 점그래프 → 롤리팝 그래프로 뼈대 골격을 만들어 나간다. 대략 골격이 제작되고 나면 외양과 필요한 경우 값도 텍스트로 넣어 시각화 제품을 완성한다. 롤리팝 사탕 그래프를 작성할 때 geom_point()를 사용해서 롤리팝 사탕을 제작하고, geom_sgement() 함수를 사용해서 사탕 막대를 그린다. 이때 막대 사탕의 시작과 끝을 시작은 x, y에 넣어주고 끝은 xend와 yend에 넣어 마무리한다. 데이터는 ggplot2에 내장된 midwest 데이터를 사용하자. midwest 데이터셋은 2000년 미국 중서부 센서스 데이터로 인구통계 조사가 담겨있다. percollege 변수는 카운티(우리나라 군에 해당) 별 대학졸업비율을 나타낸다. 한발더 나아가, 평균값에서 얼마나 차이가 있느냐를 롤리팝 그래프로 시각화하는 패턴이 많이 사용된다. 이를 위해서, 앞서와 마찬가지로 15개 카운티를 뽑아내고 평균을 구하고 평균이상, 평균이하에 대한 요인(factor)도 함께 만들어낸다. 반영한다. 9.5 아령(dumbbell) 그래프 두시점을 비교하여 전후를 비교한다던가 두 지역을 비교할 때 아령 그래프는 매우 효과적이다. TV 시리즈별로 회차를 달리하여 첫번째와 가장 마지막 시청자수를 비교하여 시각화하는데 아령(dumbbell) 그래프가 적절한 예시가 될 것으로 보인다. 이를 위해서 ggplot()에 들어가는 자료형을 미리 준비하고 이에 맞춰 geom_line()과 geom_point()를 결합시켜 시각화한다. 9.6 경사(Slope) 그래프 아령 그래프를 제작한 동일한 데이터를 터프티(tufte) 스타일 경사그래프로 구현하면 시즌별 첫회와 최종회 시청자수 비교를 좀더 직관적으로 만들 수 있다. ggplot의 기본기능을 활용하여 경사그래프를 시각화하고 강조하고자 하는 시즌을 색상을 달리하여 표현한다. 이를 통해 1~7번째 시즌은 1회차 시청율은 낮으나 최종회는 높게 마무리된 것을 알 수 있고, 더불어 시즌이 진행될 수록 1회차 시청율도 높아지고 있었다. 하지만 8번째 시즌은 다른 시즌과 달리 낮게 시작했고 최종회 시청률도 크게 나아지지 않은 것을 한눈에 파악할 수 있다. 경사그래프를 제작하고는 싶으나 전반적으로 시간이 더 필요하신 분을 위해 slopegraph 패키지가 있다. slopegraph는 Base 그래픽을 기본으로 삼고 있어 자료구조도 rownames를 갖는 전통적인 데이터프레임이다. 기본 Base 그래픽을 염두에 두고 상기 TV 연속물 경사그래프를 다음과 같이 작성할 수 있다. slopegraph() 함수 대신 ggslopegraph() 함수를 사용하게 되면 ggplot()으로도 시각화를 할 수 있다. slopegraph() 함수는 자료구조가 직관적이라 처음 시각화를 하는 분에게 적절한 듯 보인다. 따라서, 앞서 ggplot 기반 경사그래프를 제작하고자 하는 경우 ggslopegraph()을 통해서도 ggplot 나머지 기능을 그대로 적용 가능하다. "],["사례.html", "사례", " 사례 "],["case-journalism.html", "10 . 데이터 저널리즘", " 10 . 데이터 저널리즘 "],["case-worldcup.html", "11 . 러시아 월드컵", " 11 . 러시아 월드컵 "],["case-corona.html", "12 . 코로나19", " 12 . 코로나19 "],["references-1.html", "References", " References GitHub 저장소 : clauswilke/dataviz "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
